select * from customers;
select * from orders;
select * from products  ;
#total sales by category
select product_category ,sum(sales_amount) as total_sales from orders
group by product_category ;

#sales by category
select product_category ,sales_amount from orders;

select customers.customer_name, customers.customer_id,orders.order_date
from customers
join orders on orders.order_id=customers.customer_id;

Total Sales per Product Category:

SELECT product_category, SUM(sales_amount) AS total_sales
FROM orders
GROUP BY product_category;

Top 5 Customers by Total Purchase:

SELECT c.customer_name, SUM(o.sales_amount) AS total_sales
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_name
ORDER BY total_sales DESC
LIMIT 5;


Monthly Sales Trend:

SELECT EXTRACT(MONTH FROM order_date) AS month, SUM(sales_amount) AS monthly_sales
FROM orders
GROUP BY month
ORDER BY month;


1. Customer Segmentation: Identify Active vs. Inactive Customers
SELECT customer_name, 
       CASE 
           WHEN MAX(order_date) < CURRENT_DATE - INTERVAL '1 year' THEN 'Inactive'
           ELSE 'Active'
       END AS customer_status
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customer_name;


2. Product Performance: Top-Selling Products by Region


SELECT region, product_name, SUM(sales_amount) AS total_sales
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY region, product_name
ORDER BY region, total_sales DESC;

3. Customer Retention: Returning vs. New Customers


SELECT 
    CASE 
        WHEN COUNT(order_id) = 1 THEN 'New Customer'
        ELSE 'Returning Customer'
    END AS customer_type,
    COUNT(customer_id) AS customer_count
FROM orders
GROUP BY customer_id;


4. Time-Series Analysis: Year-over-Year Sales Growth

SELECT EXTRACT(YEAR FROM order_date) AS year, 
       SUM(sales_amount) AS total_sales,
       LAG(SUM(sales_amount)) OVER (ORDER BY EXTRACT(YEAR FROM order_date)) AS previous_year_sales,
       ROUND((SUM(sales_amount) - LAG(SUM(sales_amount)) OVER (ORDER BY EXTRACT(YEAR FROM order_date))) / 
             LAG(SUM(sales_amount)) OVER (ORDER BY EXTRACT(YEAR FROM order_date)) * 100, 2) AS sales_growth
FROM orders
GROUP BY EXTRACT(YEAR FROM order_date)
ORDER BY year;

5. Customer Lifetime Value (CLV): Total Purchase Amount Per Customer

SELECT customer_name, SUM(sales_amount) AS total_purchase
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_name
ORDER BY total_purchase DESC;


6. Sales Distribution: Percentage Contribution of Each Product Category

SELECT product_category, 
       SUM(sales_amount) AS category_sales,
       ROUND(SUM(sales_amount) / (SELECT SUM(sales_amount) FROM orders) * 100, 2) AS percentage_contribution
FROM orders
GROUP BY product_category
ORDER BY category_sales DESC;


7. Inventory Management: Products with Low Stock

SELECT product_name, stock_level
FROM products
WHERE stock_level < 50
ORDER BY stock_level ASC;


8. Order Frequency: Most Frequent Purchase Days

SELECT TO_CHAR(order_date, 'Day') AS day_of_week, COUNT(order_id) AS order_count
FROM orders
GROUP BY TO_CHAR(order_date, 'Day')
ORDER BY order_count DESC;


9. Customer Demographics: Age Group Distribution of Customers

SELECT CASE
           WHEN age BETWEEN 18 AND 25 THEN '18-25'
           WHEN age BETWEEN 26 AND 35 THEN '26-35'
           WHEN age BETWEEN 36 AND 45 THEN '36-45'
           ELSE '45+'
       END AS age_group, COUNT(customer_id) AS customer_count
FROM customers
GROUP BY age_group
ORDER BY customer_count DESC;
